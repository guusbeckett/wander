<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="direction" xml:space="preserve">
    <value>Directions</value>
    <comment>Titel van routebeschrijving</comment>
  </data>
  <data name="geluid" xml:space="preserve">
    <value>Sound clip</value>
    <comment>Geluids Fragment knop</comment>
  </data>
  <data name="helpBox" xml:space="preserve">
    <value>Welcome to the help menu W @ nder .
This help menu functionalities of this application are described . First you will see on the left side a route description . In this menu you can find all the sights you pass by . When you click on a new screen comes up , with the information of interest . You do not have to be in order to open it. Interest in the The window of interest is described later in the text .
Right you will see a gear position when you press this menu is the setting up. In this menu you can request the help window and change the language . With the cross top right of the window that comes up , you can exit the menu .
Wholesale you will see a map , you can zoom in and out this by using . Two fingers together on the screen Due to drag two fingers together , the smaller card . When the fingers move away from each other , the card is greater. On the map multiple items are displayed . As spheres are shown with a few letters . These beads with letters sights . When one of these spheres is pressed, as is open to the left of the attraction. When a finger touches the map and drag your finger , the card will be towed , leaving other parts of the map can be seen.
If you are near a point of interest , it will display a message and name to which this interest is . Where the interest you are close enough the ball will change color , so you can see which ones are visited . When an attraction is visited , a route will automatically be calculated in the following section . Alternatively , the distance between the top of the screen show the two sites . You do not necessarily have the route calculated to follow should not be discussed. When you come to a point of interest , while previous has beaten the is again calculated a new route.
When you press one of the two ways a landmark is pressed, a new screen. You can see above in the name of the attraction. On the left are shown two things . The first , or upper , the pictures of the attraction. When multiple images are present , you can use the swipe motion through the photos back . With swipe means , you can put your finger on the picture and move it left or right . In the second half of the left side is a media player . Allows you to play video or audio if present . To the right of this screen is described information about the attraction itself . The arrow in the top left corner you can return to the main screen .
While walking the route is created automatically by the application all data . This makes it possible to use the data , such as to display the route that has already been run , again, if the application for a reason close . If there is data will also get a screen that asks whether the session should be resumed. If "Yes" is pressed here , it will load the old data . If "No" is pressed , it will restart the route.
When you get to the last point of interest , the session will be automatically deleted .
You can empathize with the tablet back at the tourist office when you finish the route .</value>
    <comment>Help box</comment>
  </data>
  <data name="NeedHelp" xml:space="preserve">
    <value>Need help?</value>
    <comment>Titel van helpBox</comment>
  </data>
  <data name="Video" xml:space="preserve">
    <value>Video</value>
    <comment>Video Fragment Knop</comment>
  </data>
  <data name="taalSetting" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="noButton" xml:space="preserve">
    <value>No</value>
    <comment>no button</comment>
  </data>
  <data name="resumeSession" xml:space="preserve">
    <value>Resume last session?</value>
  </data>
  <data name="yesButton" xml:space="preserve">
    <value>Yes</value>
    <comment>Yes button resume session</comment>
  </data>
  <data name="internetErrorContent" xml:space="preserve">
    <value>Internetconnection lost</value>
    <comment>Internet connection lost message</comment>
  </data>
  <data name="internetErrorHeader" xml:space="preserve">
    <value>No internetconnection</value>
    <comment>No internet connection warning titel</comment>
  </data>
  <data name="routeSetting.Text" xml:space="preserve">
    <value>Select route</value>
    <comment>Select route titel</comment>
  </data>
  <data name="near" xml:space="preserve">
    <value>You're closing in on</value>
    <comment>message when near sight</comment>
  </data>
  <data name="noDescription" xml:space="preserve">
    <value>There is no description available for this sight.</value>
  </data>
  <data name="deleteSessionQuestion" xml:space="preserve">
    <value>Do you want to delete the history?</value>
  </data>
  <data name="seeSight" xml:space="preserve">
    <value>Checkout</value>
  </data>
</root>